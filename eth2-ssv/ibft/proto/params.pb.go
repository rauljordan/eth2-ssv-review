// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/bloxapp/ssv/ibft/proto/params.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsensusParams struct {
	RoundChangeDuration   int64    `protobuf:"varint,1,opt,name=round_change_duration,json=roundChangeDuration,proto3" json:"round_change_duration,omitempty"`
	LeaderPreprepareDelay int64    `protobuf:"varint,2,opt,name=leader_preprepare_delay,json=leaderPreprepareDelay,proto3" json:"leader_preprepare_delay,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ConsensusParams) Reset()         { *m = ConsensusParams{} }
func (m *ConsensusParams) String() string { return proto.CompactTextString(m) }
func (*ConsensusParams) ProtoMessage()    {}
func (*ConsensusParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89e71a0d811a3fe, []int{0}
}

func (m *ConsensusParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusParams.Unmarshal(m, b)
}
func (m *ConsensusParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusParams.Marshal(b, m, deterministic)
}
func (m *ConsensusParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusParams.Merge(m, src)
}
func (m *ConsensusParams) XXX_Size() int {
	return xxx_messageInfo_ConsensusParams.Size(m)
}
func (m *ConsensusParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusParams proto.InternalMessageInfo

func (m *ConsensusParams) GetRoundChangeDuration() int64 {
	if m != nil {
		return m.RoundChangeDuration
	}
	return 0
}

func (m *ConsensusParams) GetLeaderPreprepareDelay() int64 {
	if m != nil {
		return m.LeaderPreprepareDelay
	}
	return 0
}

type Node struct {
	IbftId               uint64   `protobuf:"varint,1,opt,name=ibft_id,json=ibftId,proto3" json:"ibft_id,omitempty"`
	Pk                   []byte   `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Sk                   []byte   `protobuf:"bytes,3,opt,name=sk,proto3" json:"sk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89e71a0d811a3fe, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetIbftId() uint64 {
	if m != nil {
		return m.IbftId
	}
	return 0
}

func (m *Node) GetPk() []byte {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *Node) GetSk() []byte {
	if m != nil {
		return m.Sk
	}
	return nil
}

type InstanceParams struct {
	ConsensusParams      *ConsensusParams `protobuf:"bytes,1,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params,omitempty"`
	IbftCommittee        map[uint64]*Node `protobuf:"bytes,2,rep,name=ibft_committee,json=ibftCommittee,proto3" json:"ibft_committee,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstanceParams) Reset()         { *m = InstanceParams{} }
func (m *InstanceParams) String() string { return proto.CompactTextString(m) }
func (*InstanceParams) ProtoMessage()    {}
func (*InstanceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89e71a0d811a3fe, []int{2}
}

func (m *InstanceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceParams.Unmarshal(m, b)
}
func (m *InstanceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceParams.Marshal(b, m, deterministic)
}
func (m *InstanceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceParams.Merge(m, src)
}
func (m *InstanceParams) XXX_Size() int {
	return xxx_messageInfo_InstanceParams.Size(m)
}
func (m *InstanceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceParams.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceParams proto.InternalMessageInfo

func (m *InstanceParams) GetConsensusParams() *ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return nil
}

func (m *InstanceParams) GetIbftCommittee() map[uint64]*Node {
	if m != nil {
		return m.IbftCommittee
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsensusParams)(nil), "proto.ConsensusParams")
	proto.RegisterType((*Node)(nil), "proto.Node")
	proto.RegisterType((*InstanceParams)(nil), "proto.InstanceParams")
	proto.RegisterMapType((map[uint64]*Node)(nil), "proto.InstanceParams.IbftCommitteeEntry")
}

func init() {
	proto.RegisterFile("github.com/bloxapp/ssv/ibft/proto/params.proto", fileDescriptor_e89e71a0d811a3fe)
}

var fileDescriptor_e89e71a0d811a3fe = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x4e, 0xb3, 0x40,
	0x14, 0xfd, 0x80, 0xb6, 0x5f, 0x32, 0x68, 0xdb, 0x8c, 0xd6, 0x92, 0x6e, 0x6c, 0xeb, 0xa6, 0x1b,
	0x21, 0xc1, 0xc4, 0x18, 0x77, 0xf6, 0x67, 0xd1, 0x85, 0xda, 0xb0, 0x74, 0x43, 0x06, 0x98, 0x52,
	0x02, 0xcc, 0x90, 0x99, 0xa1, 0xb1, 0x0b, 0xdf, 0xcf, 0xa7, 0xf0, 0x25, 0x7c, 0x01, 0x33, 0x03,
	0x35, 0xb5, 0x2e, 0x4c, 0x48, 0xee, 0xcf, 0xb9, 0xe7, 0x5c, 0xce, 0xcd, 0x00, 0x3b, 0x4e, 0xc4,
	0xa6, 0x0c, 0xec, 0x90, 0xe6, 0x4e, 0x90, 0xd1, 0x57, 0x54, 0x14, 0x0e, 0xe7, 0x5b, 0x27, 0x09,
	0xd6, 0xc2, 0x29, 0x18, 0x15, 0xd4, 0x29, 0x10, 0x43, 0x39, 0xb7, 0x55, 0x01, 0x9b, 0x2a, 0x0c,
	0xae, 0x0f, 0x68, 0x31, 0x8d, 0x69, 0x35, 0x1a, 0x94, 0x6b, 0x55, 0x55, 0x3c, 0x99, 0x55, 0xac,
	0xf1, 0x1b, 0xe8, 0xcc, 0x28, 0xe1, 0x98, 0xf0, 0x92, 0xaf, 0x94, 0x1c, 0x74, 0x41, 0x8f, 0xd1,
	0x92, 0x44, 0x7e, 0xb8, 0x41, 0x24, 0xc6, 0x7e, 0x54, 0x32, 0x24, 0x12, 0x4a, 0x2c, 0x6d, 0xa8,
	0x4d, 0x0c, 0xef, 0x4c, 0x81, 0x33, 0x85, 0xcd, 0x6b, 0x08, 0xde, 0x82, 0x7e, 0x86, 0x51, 0x84,
	0x99, 0x5f, 0x30, 0x2c, 0x3f, 0xc4, 0xb0, 0x1f, 0xe1, 0x0c, 0xed, 0x2c, 0x5d, 0xb1, 0x7a, 0x15,
	0xbc, 0xfa, 0x46, 0xe7, 0x12, 0x1c, 0x2f, 0x40, 0xe3, 0x89, 0x46, 0x18, 0xf6, 0xc1, 0x7f, 0xe9,
	0xcb, 0x4f, 0x22, 0xb5, 0xa5, 0xe1, 0xb5, 0x64, 0xb9, 0x8c, 0xe0, 0x39, 0xd0, 0x8b, 0x54, 0x69,
	0x9c, 0x4c, 0x1b, 0xef, 0x1f, 0x97, 0xff, 0x3c, 0xbd, 0x48, 0x61, 0x1b, 0xe8, 0x3c, 0xb5, 0x0c,
	0xd9, 0xf5, 0x74, 0x9e, 0x8e, 0x3f, 0x35, 0xd0, 0x5e, 0x12, 0x2e, 0x10, 0x09, 0x71, 0xed, 0xe2,
	0x01, 0x74, 0xc3, 0xbd, 0x31, 0xbf, 0x3a, 0x94, 0x92, 0x36, 0xdd, 0x8b, 0xca, 0xba, 0x7d, 0xe4,
	0xdb, 0xeb, 0x84, 0x47, 0x87, 0x78, 0x06, 0x6d, 0xf5, 0x53, 0x21, 0xcd, 0xf3, 0x44, 0x08, 0x8c,
	0x2d, 0x7d, 0x68, 0x4c, 0x4c, 0x77, 0x52, 0x0b, 0xfc, 0xdc, 0x68, 0x2f, 0x83, 0xb5, 0x98, 0xed,
	0x47, 0x17, 0x44, 0xb0, 0x9d, 0x77, 0x9a, 0x1c, 0xf6, 0x06, 0x8f, 0x00, 0xfe, 0x1e, 0x82, 0x5d,
	0x60, 0xa4, 0x78, 0x57, 0xfb, 0x96, 0x29, 0x1c, 0x81, 0xe6, 0x16, 0x65, 0x25, 0x56, 0xbe, 0x4d,
	0xd7, 0xac, 0xf7, 0xc9, 0x4b, 0x79, 0x15, 0x72, 0xaf, 0xdf, 0x69, 0xd3, 0xab, 0x97, 0xd1, 0x9f,
	0x6f, 0x24, 0x68, 0xa9, 0x70, 0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x53, 0x0f, 0x43, 0x4f,
	0x02, 0x00, 0x00,
}
